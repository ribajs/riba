require("source-map-support/source-map-support.js").install(),module.exports=(()=>{"use strict";var e={290:(e,r,o)=>{o.r(r);const n=require("electron"),a=require("path"),i=require("fs"),t=require("pkg-dir");var s=o.n(t);process.env.NODE_OPTIONS=void 0;let _;async function createWindow(){const e=await s()(__dirname),r=a.join(e||__dirname,"dist","preload.js");console.log("preloadPath",r);const o={nodeIntegration:!1,contextIsolation:!0,enableRemoteModule:!1,preload:r};_=new n.BrowserWindow({width:800,height:600,webPreferences:o}),_.loadFile("index.html")}n.app.whenReady().then(async()=>{await createWindow(),n.app.on("activate",(function(){0===n.BrowserWindow.getAllWindows().length&&createWindow()}))}),n.app.on("window-all-closed",(function(){"darwin"!==process.platform&&n.app.quit()})),n.ipcMain.on("main/versions",async()=>{let e="";const r=await s()(__dirname);if(r){e=JSON.parse(await i.promises.readFile(a.resolve(r,"package.json"),"utf8")).dependencies["@ribajs/core"].replace("^","")}_.webContents.send("main/versions",Object.assign(Object.assign({},process.versions),{riba:e}))}),n.ipcMain.on("main/hello",(e,r)=>{console.log(r),_.webContents.send("main/hello",{answer:"hello :)"})})}},r={};function __webpack_require__(o){if(r[o])return r[o].exports;var n=r[o]={exports:{}};return e[o](n,n.exports,__webpack_require__),n.exports}return __webpack_require__.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(r,{a:r}),r},__webpack_require__.d=(e,r)=>{for(var o in r)__webpack_require__.o(r,o)&&!__webpack_require__.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},__webpack_require__.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__(290)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,